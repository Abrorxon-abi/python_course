# # 1) OrderedDict - упорядоченный словарь, несмотря на мнение многих, он все еще актуален, оптимизирован для работы с порядком
# # элементов в словаре. Позволяет доставать пары как с конца так и с начала словаря, переставлять пары в конец или начало словаря.
# # При сравнении учитывает порядок элементов, а не только их равенство. За все это платит большим потреблением памяти.

# # 2) ChainMap нужен для логического объединения словарей для поиска информации, физического копирования словарей не происходит и
# # если изменить один из исходников, то изменении отобразится и в chainMap. Удобен для поиска информации, но при изменениях
# # меняется первый словарь в наборе.

# # 3) Counter - удобный инструмент для подсчета элементов в последовательности, считает только с hashable типы (строки, числа, кортежи).

# # 4) deque - двунаправленная очередь, быстро вставляет элементы как в конец, так и начало, быстро достает с обоих концов. Она
# # потокобезопасна (thread-safe) и может быть использована для многопоточных операций, позволяет задать максимальный размер.

# # 5) namedtuple нужен для создания структуры данных, нечто среднее между стандартными типами и самописным классом. Пригодится
# # когда отдельный класс избыточен или ООП пока неизвестно. Неизменяемый, позволяет обращаться по имени атрибута (причем быстро),
# # позволяет использовать индексы.

# from collections import OrderedDict, ChainMap, Counter, deque, namedtuple

# array = [1, 2, 3, 4, 5]

# a_deque = deque()


# dict1 = {1: 1, 2: 2, 3: 3}

# dict2 = {3: 3, 1: 1, 4: 4}
# # print(dict1 == dict2)
# # print(OrderedDict(dict2) == OrderedDict(dict1))
# # print(ChainMap(dict1, dict2))
# # qwe = ChainMap(dict1, dict2)
# # print(2 in qwe)
# # print(Counter(['hello', 'world']))
# # print(Counter('hello world'))
# # print(Counter('hello world').total())
# # print(Counter('hello world').most_common(2))
# # print(deque(array, maxlen=3))
# # deque(array).appendleft(0)
# # a_deque.appendleft(0)
# # a_deque.appendleft(1)
# # a_deque.appendleft(2)
# # a_deque.rotate(2)
# # print(a_deque)
# # a_deque.popleft()
# # print(a_deque)
# # CAT = namedtuple('Cat', 'name age color')
# # tom = CAT('Tom', 1, 'yellow')
# # print(tom)
# # print(tom[0])
# # print(tom.name)


